import logging

import allure
from google.protobuf.json_format import MessageToDict, MessageToJson
from grpc._channel import _Rendezvous

logger = logging.getLogger('grpc')


@allure.step('grpc call "{1}"')
def call(stuff: tuple, method_name: str, params, request_obj_name='', timeout=10, out='dict'):
    """
    Short form of grpc requests execution. Works only for Simple RPC (do not use it for GRPC streams)
    More suitable for methods with "similar" request object names. For cases: GetStock and GetStockRequest
    Otherwise, you must use parameter request_obj_name. For cases: GetStock and StockStatusRequest

    :param stuff: tuple with...
    - stub-object
    - "request/response objects" module (usually generated by "protoc" utility)
    - metadata tuple. OPTIONAL
    Example:
    (
        myservice_pb2_grpc.MyServiceStub(grpc_channel_object),
        myservice_pb2,
        (('authorization', '<your_token>'), ('x-o3-sample-trace', 'true'))
    )
    :param method_name: grpc-method name
    :param params: method's params (as dict)
    :param timeout: request execution maximum time. OPTIONAL
    :param request_obj_name: request object name. Required if it not "similar" with method name. See Examples below
    :return: tuple
    - GRPC-response as dict / or as string / or as protobuf message
    - Call values. See https://grpc.io/grpc/python/grpc.html#grpc.UnaryUnaryMultiCallable.with_call
    =============================================
    Examples:
    call(stuff, 'GetStock', params={'ids': [12345]})
    call(stuff, 'FreeReserve', params=reserve_params, request_obj_name='ReserveRequest', timeout=3)
    call(stuff, 'GetItems', item_params, out='raw')
    """
    request_obj_name = request_obj_name if request_obj_name else f'{method_name}Request'
    stub, requester = stuff[0], stuff[1]
    metadata = stuff[2] if len(stuff) == 3 else ''
    logger.info(f'\n=============== GRPC call "{method_name}" ================\n\tGRPC request params: \n{params}')
    try:
        response, details = getattr(stub, method_name).with_call(
            getattr(requester, request_obj_name)(**params), metadata=metadata, timeout=timeout)
    except _Rendezvous as e:
        logger.error(f'\n\tERROR! Call details: \n{e.trailing_metadata()}')
        raise e

    response = prepare_response(out, response)
    logger.info(f"""
    GRPC response body: \n{response}
    GRPC response headers: \n{details.trailing_metadata()}
=====================================================""")
    return response, details


def prepare_response(out, message):
    if out == 'dict':
        return MessageToDict(message)
    elif out == 'json':
        return MessageToJson(message)
    return message
